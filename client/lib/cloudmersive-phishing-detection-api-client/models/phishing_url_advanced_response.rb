=begin
#phishingapi

#Easily and directly scan and block phishing security threats.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersivePhishingDetectionApiClient
  # 
  class PhishingUrlAdvancedResponse
    # Specifies if the url (or its host or domain) passed all the checks or not.
    attr_accessor :clean_result

    # Risk value from 0.0 - 1.0. Higher numbers are a higher risk  <br />Anything below 0.3 should be considered safe. Anything above 0.7 should be considered a significant risk. <br />  A score of 1.0 indicates the url, host, or domain failed significant safety checks.<br />  If a url passes all the tests for the basic api, the risk will be 0.7. If a url passes all the tests for the advanced api, the risk will be 0.2.
    attr_accessor :risk

    # Specifies if the full url with query parameters and fragment is a phishing threat  <br />The advanced api performs more checks on the full url.
    attr_accessor :contains_threat_url

    # Specifies if the host of the url (i.e. ```mysite.hostingsite.com``` for a url of ```https://mysite.hostingsite.com/index.html```) is a phishing threat  <br />The advanced api performs more checks on the host
    attr_accessor :contains_threat_host

    # Specifies if the registerable domain of the url (i.e. ```hostingsite.com``` for a url of ```https://mysite.hostingsite.com/index.html```) is a phishing threat  <br />The advanced api performs more checks on the domain
    attr_accessor :contains_threat_domain

    # The url that was provided or the destination url after redirection contains an SSRF threat
    attr_accessor :contains_threat_ssrf

    # The url that was provided or the destination url after redirection is an unsafe format
    attr_accessor :contains_threat_url_format

    # The domain of the destination url is low quality.
    attr_accessor :contains_threat_domain_quality

    # The domain of the destination url has been registered too recently.
    attr_accessor :contains_threat_domain_age

    # Specifies if the url was malformed or not
    attr_accessor :url_is_invalid_syntax

    # Input URL that was scanned
    attr_accessor :input_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'clean_result' => :'CleanResult',
        :'risk' => :'Risk',
        :'contains_threat_url' => :'ContainsThreatUrl',
        :'contains_threat_host' => :'ContainsThreatHost',
        :'contains_threat_domain' => :'ContainsThreatDomain',
        :'contains_threat_ssrf' => :'ContainsThreatSSRF',
        :'contains_threat_url_format' => :'ContainsThreatUrlFormat',
        :'contains_threat_domain_quality' => :'ContainsThreatDomainQuality',
        :'contains_threat_domain_age' => :'ContainsThreatDomainAge',
        :'url_is_invalid_syntax' => :'UrlIsInvalidSyntax',
        :'input_url' => :'InputUrl'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'clean_result' => :'BOOLEAN',
        :'risk' => :'Float',
        :'contains_threat_url' => :'BOOLEAN',
        :'contains_threat_host' => :'BOOLEAN',
        :'contains_threat_domain' => :'BOOLEAN',
        :'contains_threat_ssrf' => :'BOOLEAN',
        :'contains_threat_url_format' => :'BOOLEAN',
        :'contains_threat_domain_quality' => :'BOOLEAN',
        :'contains_threat_domain_age' => :'BOOLEAN',
        :'url_is_invalid_syntax' => :'BOOLEAN',
        :'input_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'CleanResult')
        self.clean_result = attributes[:'CleanResult']
      end

      if attributes.has_key?(:'Risk')
        self.risk = attributes[:'Risk']
      end

      if attributes.has_key?(:'ContainsThreatUrl')
        self.contains_threat_url = attributes[:'ContainsThreatUrl']
      end

      if attributes.has_key?(:'ContainsThreatHost')
        self.contains_threat_host = attributes[:'ContainsThreatHost']
      end

      if attributes.has_key?(:'ContainsThreatDomain')
        self.contains_threat_domain = attributes[:'ContainsThreatDomain']
      end

      if attributes.has_key?(:'ContainsThreatSSRF')
        self.contains_threat_ssrf = attributes[:'ContainsThreatSSRF']
      end

      if attributes.has_key?(:'ContainsThreatUrlFormat')
        self.contains_threat_url_format = attributes[:'ContainsThreatUrlFormat']
      end

      if attributes.has_key?(:'ContainsThreatDomainQuality')
        self.contains_threat_domain_quality = attributes[:'ContainsThreatDomainQuality']
      end

      if attributes.has_key?(:'ContainsThreatDomainAge')
        self.contains_threat_domain_age = attributes[:'ContainsThreatDomainAge']
      end

      if attributes.has_key?(:'UrlIsInvalidSyntax')
        self.url_is_invalid_syntax = attributes[:'UrlIsInvalidSyntax']
      end

      if attributes.has_key?(:'InputUrl')
        self.input_url = attributes[:'InputUrl']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          clean_result == o.clean_result &&
          risk == o.risk &&
          contains_threat_url == o.contains_threat_url &&
          contains_threat_host == o.contains_threat_host &&
          contains_threat_domain == o.contains_threat_domain &&
          contains_threat_ssrf == o.contains_threat_ssrf &&
          contains_threat_url_format == o.contains_threat_url_format &&
          contains_threat_domain_quality == o.contains_threat_domain_quality &&
          contains_threat_domain_age == o.contains_threat_domain_age &&
          url_is_invalid_syntax == o.url_is_invalid_syntax &&
          input_url == o.input_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [clean_result, risk, contains_threat_url, contains_threat_host, contains_threat_domain, contains_threat_ssrf, contains_threat_url_format, contains_threat_domain_quality, contains_threat_domain_age, url_is_invalid_syntax, input_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersivePhishingDetectionApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
