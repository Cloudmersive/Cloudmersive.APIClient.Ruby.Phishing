=begin
#phishingapi

#Easily and directly scan and block phishing security threats.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module CloudmersivePhishingDetectionApiClient
  class PhishingUrlBatchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept multiple urls at once to perform lookups to see if the urls are known phishing sites as well as multiple other scans to determine  if the URL is a potential phishing threat.
    # Uses advanced AI and deterministic methods to detect if a URL is a phishing threat.
    # @param [Hash] opts the optional parameters
    # @option opts [PhishingUrlAdvancedRequestBatch] :body 
    # @return [PhishingUrlAdvancedResponseBatch]
    def phishing_url_advanced_batch_post(opts = {})
      data, _status_code, _headers = phishing_url_advanced_batch_post_with_http_info(opts)
      data
    end

    # Accept multiple urls at once to perform lookups to see if the urls are known phishing sites as well as multiple other scans to determine  if the URL is a potential phishing threat.
    # Uses advanced AI and deterministic methods to detect if a URL is a phishing threat.
    # @param [Hash] opts the optional parameters
    # @option opts [PhishingUrlAdvancedRequestBatch] :body 
    # @return [Array<(PhishingUrlAdvancedResponseBatch, Fixnum, Hash)>] PhishingUrlAdvancedResponseBatch data, response status code and response headers
    def phishing_url_advanced_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhishingUrlBatchApi.phishing_url_advanced_batch_post ...'
      end
      # resource path
      local_var_path = '/phishing/url/advanced/batch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhishingUrlAdvancedResponseBatch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhishingUrlBatchApi#phishing_url_advanced_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Accept multiple urls at oncee and perform AI and deterministic methods to detect if a URL is a phishing threat.
    # Uses AI and deterministic methods to detect if a URL is a phishing threat.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PhishingUrlRequest>] :body 
    # @return [PhishingUrlResponseBatch]
    def phishing_url_batch_post(opts = {})
      data, _status_code, _headers = phishing_url_batch_post_with_http_info(opts)
      data
    end

    # Accept multiple urls at oncee and perform AI and deterministic methods to detect if a URL is a phishing threat.
    # Uses AI and deterministic methods to detect if a URL is a phishing threat.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PhishingUrlRequest>] :body 
    # @return [Array<(PhishingUrlResponseBatch, Fixnum, Hash)>] PhishingUrlResponseBatch data, response status code and response headers
    def phishing_url_batch_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhishingUrlBatchApi.phishing_url_batch_post ...'
      end
      # resource path
      local_var_path = '/phishing/url/batch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/*+json', 'application/xml', 'text/xml', 'application/*+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PhishingUrlResponseBatch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhishingUrlBatchApi#phishing_url_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
